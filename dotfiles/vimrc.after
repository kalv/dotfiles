syntax enable
" set up the colors
set background=dark
" set background=light
colorscheme solarized

" buffergator split policy
let g:buffergator_viewport_split_policy = "T"
let g:buffergator_split_size = 20

nmap <leader>b :BuffergatorOpen<cr>
nmap <leader>p :CtrlP<cr>

set wildignore+=*/tmp/*,*/node_modules/*,*.so,*.swp,*.zip
set nonumber

" Enable mouse
set mouse=a

" Easily split off a new vertical split window
nmap <leader>v :vsplit<cr>

" some tab shortcuts to help switching around
nmap <leader>h :tabprevious<cr>
nmap <leader>l :tabnext<cr>

" improve the navigation of splits using ctrl
" nnoremap <C-J> <C-W><C-J>
" nnoremap <C-K> <C-W><C-K>
" nnoremap <C-L> <C-W><C-L>
" nnoremap <C-H> <C-W><C-H>

" default to right split
set splitright

" pull up a vimshell
nmap <leader>s :VimShell<cr>

" let g:neocomplcache_enable_at_startup = 1

let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
let g:vimshell_prompt =  '$ '

" unsure why janus key binding isn't working
nmap <leader>gb :Gblame<CR>
nmap <leader>gs :Gstatus<CR>
nmap <leader>gd :Gdiff<CR>
nmap <leader>gl :Glog<CR>
nmap <leader>gc :Gcommit<CR>
nmap <leader>gp :Git push<CR>

" Set up unimpaired to use hjkl
" Normal Mode: Bubble single lines
"call janus#add_mapping('unimpaired', 'nmap', '<C-k>', '[e')
"call janus#add_mapping('unimpaired', 'nmap', '<C-j>', ']e')

" Visual Mode: Bubble multiple lines
"call janus#add_mapping('unimpaired', 'vmap', '<C-k>', '[egv')
"call janus#add_mapping('unimpaired', 'vmap', '<C-j>', ']egv')

" cucumber mappings
map <leader>c :call RunCurrentCuke()<CR>
map <leader>w :call RunWipCuke()<CR>

function! RunCurrentCuke()
  if InCukeFile()
    let l:command = "cucumber -r features " . @%
    call SetLastTestCommand(l:command)
    call RunTestCmd(l:command)
  endif
endfunction

function! RunWipCuke()
  if InCukeFile()
    let l:command = "cucumber -r features " . @% . " --profile=wip"
    call SetLastTestCommand(l:command)
    call RunTestCmd(l:command)
  endif
endfunction

function! InCukeFile()
  return match(expand("%"), ".feature$") != -1
endfunction

" rspec mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>r :call RunLastTest()<CR>

function! RunCurrentSpecFile()
  if InSpecFile()
    let l:command = "rspec " . @%
    call SetLastTestCommand(l:command)
    call RunTestCmd(l:command)
  endif
endfunction

function! RunNearestSpec()
  if InSpecFile()
    let l:command = "rspec " . @% . ":" . line(".")
    call SetLastTestCommand(l:command)
    call RunTestCmd(l:command)
  endif
endfunction

function! RunLastTest()
  if exists("t:last_test_command")
    call RunTestCmd(t:last_test_command)
  endif
endfunction

function! InSpecFile()
  return match(expand("%"), "_spec.rb$") != -1
endfunction

function! SetLastTestCommand(command)
  let t:last_test_command = a:command
endfunction

function! RunTestCmd(command)
  execute ":w\|!" . a:command
endfunction
