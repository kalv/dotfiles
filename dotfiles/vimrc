" Allow plugins to know about filetype
filetype plugin indent on

" Setup plugins
call plug#begin('~/.vim/plugged')

" Install by running PlugInstall from within vim
Plug 'git://github.com/altercation/vim-colors-solarized.git'
Plug 'https://github.com/kien/ctrlp.vim.git'
Plug 'jeetsukumaran/vim-buffergator'
Plug 'rking/ag.vim'
Plug 'bling/vim-airline'
Plug 'ntpeters/vim-better-whitespace'
Plug 'ervandew/supertab'
Plug 'vim-scripts/HTML-AutoCloseTag'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline-themes'
Plug 'ap/vim-css-color'
Plug 'tpope/vim-unimpaired' "backet mapping
" Plug 'vim-syntastic/syntastic'
Plug 'matze/vim-move' " moving block of text up and down
Plug 'w0rp/ale' " async syntastic file checking

" Plug 'git@github.com:sheerun/vim-polyglot.git'
Plug 'terryma/vim-multiple-cursors'

" To work with Coffee Script / CJSX
Plug 'kchmck/vim-coffee-script'
" Plug 'mtscout6/vim-cjsx', { 'for': 'javascript' }

" Javascript handling
" Plug 'othree/yajs.vim', { 'for': 'javascript' }
Plug 'pangloss/vim-javascript'
" Easy tag creation using Emmet
" Plug 'mattn/emmet-vim'

Plug 'elixir-lang/vim-elixir'
" Handling of ElixirSense in vim
" Plug 'slashmili/alchemist.vim'

Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'

" Plug '907th/vim-auto-save'
" Plug 'thoughtbot/vim-rspec'

Plug 'slim-template/vim-slim'

call plug#end()

" Basic settings (brought over from janus)
set nocompatible      " Use vim, no vi defaults
set number            " Show line numbers
set ruler             " Show line and column number
syntax enable         " Turn on syntax highlighting allowing local overrides
set encoding=utf-8    " Set default encoding to UTF-8
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
"set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode

set hlsearch    " highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter

" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Ignore librarian-chef, vagrant, test-kitchen and Berkshelf cache
set wildignore+=*/tmp/librarian/*,*/.vagrant/*,*/.kitchen/*,*/vendor/cookbooks/*

" Ignore rails temporary asset caches
set wildignore+=*/tmp/cache/assets/*/sprockets/*,*/tmp/cache/assets/*/sass/*

" Disable temp and backup files
set wildignore+=*.swp,*~,._*

set backupdir^=~/.nvim/_backup//    " where to put backup files.
set directory^=~/.nvim/_temp//      " where to put swap files.

" change leader key
let mapleader=" "

" set up the colors
set background=dark
" set background=light
colorscheme solarized
let g:airline_theme='solarized'

" Only show branch
"let g:airline_section_b = "%{airline#util#wrap(airline#extensions#branch#get_head(),0)}"
let g:airline_section_b = ""

let g:airline_section_x = ""
let g:airline_section_y = "%{airline#util#wrap(airline#parts#filetype(),0)}"
let g:airline_section_z = "%#__accent_bold#%l:%c%#__restore__#%#__accent_bold#%#__restore__#"
let g:airline_skip_empty_sections = 1


" buffergator split policy
let g:buffergator_viewport_split_policy = "T"
let g:buffergator_split_size = 20

nmap <leader>b :BuffergatorOpen<cr>
nmap <leader>p :CtrlP<cr>

set wildignore+=*/tmp/*,*/node_modules/*,*.so,*.swp,*.zip
set nonumber

" Enable mouse
set mouse=a

" Easily split off a new vertical split window
nmap <leader>v :vsplit<cr>

" some tab shortcuts to help switching around
nmap <leader>h :tabprevious<cr>
nmap <leader>l :tabnext<cr>

" unmap some mappings Janus creates that slows down tabprevious
"unmap <leader>hs
"unmap <leader>hp
"unmap <leader>hr

" improve the navigation of splits using ctrl
" nnoremap <C-J> <C-W><C-J>
" nnoremap <C-K> <C-W><C-K>
" nnoremap <C-L> <C-W><C-L>
" nnoremap <C-H> <C-W><C-H>

" default to right split
set splitright

" don't bind git gutter keys as they clash with custom keybindings
let g:gitgutter_map_keys = 0

" cucumber mappings
map <leader>c :call RunCurrentCuke()<CR>
map <leader>w :call RunWipCuke()<CR>

function! RunCurrentCuke()
  if InCukeFile()
    let l:command = "cucumber -r features " . @%
    call SetLastTestCommand(l:command)
    call RunTestCmd(l:command)
  endif
endfunction

function! RunWipCuke()
  if InCukeFile()
    let l:command = "cucumber -r features " . @% . " --profile=wip"
    call SetLastTestCommand(l:command)
    call RunTestCmd(l:command)
  endif
endfunction

function! InCukeFile()
  return match(expand("%"), ".feature$") != -1
endfunction

" rspec mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>r :call RunLastTest()<CR>

function! RunCurrentSpecFile()
  if InSpecFile()
    let l:command = "rspec " . @%
    call SetLastTestCommand(l:command)
    call RunTestCmd(l:command)
  endif
endfunction

function! RunNearestSpec()
  if InSpecFile()
    let l:command = "rspec " . @% . ":" . line(".")
    call SetLastTestCommand(l:command)
    call RunTestCmd(l:command)
  endif
endfunction

function! RunLastTest()
  if exists("t:last_test_command")
    call RunTestCmd(t:last_test_command)
  endif
endfunction

function! InSpecFile()
  return match(expand("%"), "_spec.rb$") != -1
endfunction

function! SetLastTestCommand(command)
  let t:last_test_command = a:command
endfunction

function! RunTestCmd(command)
  execute ":w\|!" . a:command
endfunction

" Ctrl-d to replace the highligted text with something
nnoremap <c-d> :%s///g<left><left>

" After installing https://github.com/powerline/fonts
let g:airline_powerline_fonts = 1

" Strip whitespace before savig a file
autocmd BufWritePre * StripWhitespace

" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" ag is fast enough that CtrlP doesn't need to cache
" let g:ctrlp_use_caching = 0

let g:move_key_modifier = 'C'

function! ZiplineChecks()
  " let g:syntastic_ruby_checkers          = ['reek', 'rubocop', 'mri']
  " let g:syntastic_ruby_rubocop_exec      = '/Users/kalv/.rvm/gems/ruby-2.4.1/bin/rubocop'
endfunction

function! TurnOffZiplineChecks()
  " let g:syntastic_ruby_checkers          = ['mri']
endfunction

" error symbols for syntax
let g:ale_sign_error = '>>'
let g:ale_sign_warning = '--'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" only check syntax on switching to normal
"let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_delay = 500
" You can disable this option too
" if you don't want linters to run on opening a file
" let g:ale_lint_on_enter = 0

" // to search for the selection of text
vnoremap // y/<C-R>"<CR>

" Map neoterm terminal exit to ESC
" tnoremap <Esc> <C-\><C-n>

" RSpec.vim mappings when thoughtbot plugin is enabled
" map <Leader>t :call RunCurrentSpecFile()<CR>
" map <Leader>s :call RunNearestSpec()<CR>
" map <Leader>r :call RunLastSpec()<CR>
" map <Leader>a :call RunAllSpecs()<CR>

" Enable auto save
" let g:auto_save = 1
" let updatetime=500

" Rebind refresh of ctrl p so that it works on 60% keyboard
map <leader>5 :CtrlPClearCache<cr>

set laststatus=2

" Speeding up the escape character
set timeoutlen=1000 ttimeoutlen=10

" Speed up drawing/rendering
set lazyredraw
