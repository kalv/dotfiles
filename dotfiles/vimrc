" Allow plugins to know about filetype
filetype plugin indent on

" Setup plugins
call plug#begin('~/.vim/plugged')

" Install by running PlugInstall from within vim
" Plug 'rking/ag.vim'
Plug 'itchyny/lightline.vim'

" On save remove the whitespace
Plug 'ntpeters/vim-better-whitespace'

" Better tab completion
Plug 'ervandew/supertab'

" Help switch between " and '
" Plug 'tpope/vim-surround'

" Plug 'ap/vim-css-color'

Plug 'matze/vim-move' " moving block of text up and down

Plug 'w0rp/ale' " async syntastic file checking

" easily pull up results from Ag
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'

" Ctrl-n to select mutliple text and replace if need be
Plug 'terryma/vim-multiple-cursors'

" Show changes of git in the gutter
Plug 'airblade/vim-gitgutter'

" Git handler within vim, Gread, etc.
Plug 'tpope/vim-fugitive'

" theme
Plug 'morhetz/gruvbox'
Plug 'altercation/vim-colors-solarized'

" handle ruby ends
Plug 'tpope/vim-endwise'

" -----------------
" LANGUAGES
" -----------------
Plug 'leafgarland/typescript-vim' " typescript

" To work with Coffee Script / CJSX
Plug 'kchmck/vim-coffee-script'
" Plug 'mtscout6/vim-cjsx', { 'for': 'javascript' }

" Javascript handling
" Plug 'othree/yajs.vim', { 'for': 'javascript' }
Plug 'pangloss/vim-javascript'
" Easy tag creation using Emmet
" Plug 'mattn/emmet-vim'

Plug 'elixir-lang/vim-elixir'
" Handling of ElixirSense in vim
" Plug 'slashmili/alchemist.vim'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

Plug 'slim-template/vim-slim'

" Plug '907th/vim-auto-save'
" Plug 'thoughtbot/vim-rspec'

Plug 'fatih/vim-go'


call plug#end()

" Basic settings (brought over from janus)
set nocompatible      " Use vim, no vi defaults
set number            " Show line numbers
set ruler             " Show line and column number
syntax enable         " Turn on syntax highlighting allowing local overrides
set encoding=utf-8    " Set default encoding to UTF-8
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
"set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode

set hlsearch    " highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter

" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Ignore librarian-chef, vagrant, test-kitchen and Berkshelf cache
set wildignore+=*/tmp/librarian/*,*/.vagrant/*,*/.kitchen/*,*/vendor/cookbooks/*

" Ignore rails temporary asset caches
set wildignore+=*/tmp/cache/assets/*/sprockets/*,*/tmp/cache/assets/*/sass/*

" Disable temp and backup files
set wildignore+=*.swp,*~,._*

set backupdir^=~/.nvim/_backup//    " where to put backup files.
set directory^=~/.nvim/_temp//      " where to put swap files.

" change leader key
let mapleader=" "

" set up the colors
" set background=light
colorscheme gruvbox
set background=dark
" set termguicolors

let g:lightline = { 'colorscheme': 'wombat' }
let g:lightline.component_function = {
      \   'filename': 'LightlineFilename',
      \   'linter_warnings': 'LightlineLinterWarnings',
      \   'linter_errors': 'LightlineLinterErrors',
      \   'linter_ok': 'LightlineLinterOK'
      \ }

let g:lightline.component_type = {
      \     'readonly': 'error',
      \     'linter_warnings': 'warning',
      \     'linter_errors': 'error',
      \     'linter_ok': 'left',
      \ }

function! LightlineFilename()
  return expand('%:f')
endfunction

function! LightlineLinterWarnings() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('▲ %d', all_non_errors)
endfunction

function! LightlineLinterErrors() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '' : printf('✗ %d', all_errors)
endfunction

function! LightlineLinterOK() abort
  let l:counts = ale#statusline#Count(bufnr(''))
  let l:all_errors = l:counts.error + l:counts.style_error
  let l:all_non_errors = l:counts.total - l:all_errors
  return l:counts.total == 0 ? '✓' : ''
endfunction

let g:lightline.active = { 'right': [['lineinfo'], ['readonly', 'linter_errors', 'linter_warnings', 'linter_ok' ]] }

nmap <leader>b :Buffers<cr>
nmap <leader>p :FZF<cr>
nmap <leader>f :ALEFix<cr>

set wildignore+=*/tmp/*,*/node_modules/*,*.so,*.swp,*.zip
set nonumber

" Enable mouse
set mouse=a

" Easily split off a new vertical split window
nmap <leader>v :vsplit<cr>

" some tab shortcuts to help switching around
nmap <leader>h :tabprevious<cr>
nmap <leader>l :tabnext<cr>

" unmap some mappings Janus creates that slows down tabprevious
"unmap <leader>hs
"unmap <leader>hp
"unmap <leader>hr

" improve the navigation of splits using ctrl
" nnoremap <C-J> <C-W><C-J>
" nnoremap <C-K> <C-W><C-K>
" nnoremap <C-L> <C-W><C-L>
" nnoremap <C-H> <C-W><C-H>

" default to right split
set splitright

" don't bind git gutter keys as they clash with custom keybindings
let g:gitgutter_map_keys = 0

" cucumber mappings
map <leader>c :call RunCurrentCuke()<CR>
map <leader>w :call RunWipCuke()<CR>

function! RunCurrentCuke()
  if InCukeFile()
    let l:command = "cucumber -r features " . @%
    call SetLastTestCommand(l:command)
    call RunTestCmd(l:command)
  endif
endfunction

function! RunWipCuke()
  if InCukeFile()
    let l:command = "cucumber -r features " . @% . " --profile=wip"
    call SetLastTestCommand(l:command)
    call RunTestCmd(l:command)
  endif
endfunction

function! InCukeFile()
  return match(expand("%"), ".feature$") != -1
endfunction

" rspec mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>r :call RunLastTest()<CR>

function! RunCurrentSpecFile()
  if InSpecFile()
    let l:command = "rspec " . @%
    call SetLastTestCommand(l:command)
    call RunTestCmd(l:command)
  endif
endfunction

function! RunNearestSpec()
  if InSpecFile()
    let l:command = "rspec " . @% . ":" . line(".")
    call SetLastTestCommand(l:command)
    call RunTestCmd(l:command)
  endif
endfunction

function! RunLastTest()
  if exists("t:last_test_command")
    call RunTestCmd(t:last_test_command)
  endif
endfunction

function! InSpecFile()
  return match(expand("%"), "_spec.rb$") != -1
endfunction

function! SetLastTestCommand(command)
  let t:last_test_command = a:command
endfunction

function! RunTestCmd(command)
  execute ":w\|!" . a:command
endfunction

" Ctrl-d to replace the highligted text with something
nnoremap <c-d> :%s///g<left><left>

" Strip whitespace before savig a file
autocmd BufWritePre * StripWhitespace

let g:move_key_modifier = 'C'

function! ZiplineChecks()
  " let g:syntastic_ruby_checkers          = ['reek', 'rubocop', 'mri']
  " let g:syntastic_ruby_rubocop_exec      = '/Users/kalv/.rvm/gems/ruby-2.4.1/bin/rubocop'
endfunction

function! TurnOffZiplineChecks()
  " let g:syntastic_ruby_checkers          = ['mri']
endfunction

" not working as yet for ctrl-n ctrl-p for history of searches
"let g:fzf_history_dir = '~/.local/share/fzf-history'
let g:fzf_colors =
  \ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" error symbols for syntax
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '▲'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_fixers = {'javascript': ['prettier', 'eslint']}

" only check syntax on switching to normal
" let g:ale_lint_on_text_changed = 'normal'
let g:ale_lint_delay = 500
" You can disable this option too
" if you don't want linters to run on opening a file
" let g:ale_lint_on_enter = 0
"
" Always show the gutter
" let g:ale_sign_column_always = 1
" let g:ale_lint_on_save = 1

let g:ale_linters = {'javascript': ['eslint']}

" // to search for the selection of text
vnoremap // y/<C-R>"<CR>

" Map neoterm terminal exit to ESC
" tnoremap <Esc> <C-\><C-n>

" RSpec.vim mappings when thoughtbot plugin is enabled
" map <Leader>t :call RunCurrentSpecFile()<CR>
" map <Leader>s :call RunNearestSpec()<CR>
" map <Leader>r :call RunLastSpec()<CR>
" map <Leader>a :call RunAllSpecs()<CR>

" Enable auto save
" let g:auto_save = 1
" let updatetime=500

" Rebind refresh of ctrl p so that it works on 60% keyboard
map <leader>5 :CtrlPClearCache<cr>

set laststatus=2

" Speeding up the escape character
set timeoutlen=1000 ttimeoutlen=10

" Speed up drawing/rendering
set lazyredraw

" Optimize Go
autocmd FileType go nmap <leader>b  <Plug>(go-build)
autocmd FileType go nmap <leader>r  <Plug>(go-run)

command! -bang -nargs=* Ag
  \ call fzf#vim#ag(<q-args>,
  \                 <bang>0 ? fzf#vim#with_preview('up:60%')
  \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
  \                 <bang>0)
