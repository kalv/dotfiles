" Setup plugins
call plug#begin('~/.nvim/plugged')

" Install by running PlugInstall from within vim
Plug 'git://github.com/altercation/vim-colors-solarized.git'
Plug 'https://github.com/kien/ctrlp.vim.git'
Plug 'git@github.com:jeetsukumaran/vim-buffergator.git'
Plug 'rking/ag.vim'
Plug 'bling/vim-airline'
Plug 'ntpeters/vim-better-whitespace'
Plug 'ervandew/supertab'
Plug 'vim-scripts/HTML-AutoCloseTag'
Plug 'jiangmiao/auto-pairs'
Plug 'ap/vim-css-color'
Plug 'tpope/vim-unimpaired' "backet mapping
" Plug 'git@github.com:sheerun/vim-polyglot.git'
Plug 'git@github.com:terryma/vim-multiple-cursors.git'
Plug 'kchmck/vim-coffee-script'
Plug 'mtscout6/vim-cjsx'
Plug 'elixir-lang/vim-elixir'
Plug 'neomake/neomake'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'

call plug#end()

" Basic settings (brought over from janus)
set nocompatible      " Use vim, no vi defaults
set number            " Show line numbers
set ruler             " Show line and column number
syntax enable         " Turn on syntax highlighting allowing local overrides
set encoding=utf-8    " Set default encoding to UTF-8
set nowrap                        " don't wrap lines
set tabstop=2                     " a tab is two spaces
set shiftwidth=2                  " an autoindent (with <<) is two spaces
set expandtab                     " use spaces, not tabs
set list                          " Show invisible characters
set backspace=indent,eol,start    " backspace through everything in insert mode

set hlsearch    " highlight matches
set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter

" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Ignore librarian-chef, vagrant, test-kitchen and Berkshelf cache
set wildignore+=*/tmp/librarian/*,*/.vagrant/*,*/.kitchen/*,*/vendor/cookbooks/*

" Ignore rails temporary asset caches
set wildignore+=*/tmp/cache/assets/*/sprockets/*,*/tmp/cache/assets/*/sass/*

" Disable temp and backup files
set wildignore+=*.swp,*~,._*

set backupdir^=~/.nvim/_backup//    " where to put backup files.
set directory^=~/.nvim/_temp//      " where to put swap files.

" change leader key
let mapleader=" "

" set up the colors
set background=dark
" set background=light
colorscheme solarized

" buffergator split policy
let g:buffergator_viewport_split_policy = "T"
let g:buffergator_split_size = 20

nmap <leader>b :BuffergatorOpen<cr>
nmap <leader>p :CtrlP<cr>

set wildignore+=*/tmp/*,*/node_modules/*,*.so,*.swp,*.zip
set nonumber

" Enable mouse
set mouse=a

" Easily split off a new vertical split window
nmap <leader>v :vsplit<cr>

" some tab shortcuts to help switching around
nmap <leader>h :tabprevious<cr>
nmap <leader>l :tabnext<cr>

" unmap some mappings Janus creates that slows down tabprevious
"unmap <leader>hs
"unmap <leader>hp
"unmap <leader>hr

" improve the navigation of splits using ctrl
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" default to right split
set splitright

" Multi Cursor
" let g:multi_cursor_use_default_mapping=0
" let g:multi_cursor_next_key='<C-n>'
" let g:multi_cursor_prev_key='<C-p>'
" let g:multi_cursor_skip_key='<C-x>'
" let g:multi_cursor_quit_key='<Esc>'

" let g:neocomplcache_enable_at_startup = 1

" unsure why janus key binding isn't working
" nmap <leader>gb :Gblame<CR>
" nmap <leader>gs :Gstatus<CR>
" nmap <leader>gd :Gdiff<CR>
" nmap <leader>gl :Glog<CR>
" nmap <leader>gc :Gcommit<CR>
" nmap <leader>gp :Git push<CR>

" cucumber mappings
map <leader>c :call RunCurrentCuke()<CR>
map <leader>w :call RunWipCuke()<CR>

function! RunCurrentCuke()
  if InCukeFile()
    let l:command = "cucumber -r features " . @%
    call SetLastTestCommand(l:command)
    call RunTestCmd(l:command)
  endif
endfunction

function! RunWipCuke()
  if InCukeFile()
    let l:command = "cucumber -r features " . @% . " --profile=wip"
    call SetLastTestCommand(l:command)
    call RunTestCmd(l:command)
  endif
endfunction

function! InCukeFile()
  return match(expand("%"), ".feature$") != -1
endfunction

" rspec mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>r :call RunLastTest()<CR>

function! RunCurrentSpecFile()
  if InSpecFile()
    let l:command = "rspec " . @%
    call SetLastTestCommand(l:command)
    call RunTestCmd(l:command)
  endif
endfunction

function! RunNearestSpec()
  if InSpecFile()
    let l:command = "rspec " . @% . ":" . line(".")
    call SetLastTestCommand(l:command)
    call RunTestCmd(l:command)
  endif
endfunction

function! RunLastTest()
  if exists("t:last_test_command")
    call RunTestCmd(t:last_test_command)
  endif
endfunction

function! InSpecFile()
  return match(expand("%"), "_spec.rb$") != -1
endfunction

function! SetLastTestCommand(command)
  let t:last_test_command = a:command
endfunction

function! RunTestCmd(command)
  execute ":w\|!" . a:command
endfunction

" Ctrl-d to replace the highligted text with something
nnoremap <c-d> :%s///g<left><left>

" Setup Status line to see line number and that's all
" set statusline=%f:%l\ %m\ %r

" After installing https://github.com/powerline/fonts
let g:airline_powerline_fonts = 1

" Strip whitespace before savig a file
autocmd BufWritePre * StripWhitespace

" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" ag is fast enough that CtrlP doesn't need to cache
" let g:ctrlp_use_caching = 0

" handle block movement when in visual mode
vmap <C-Up> [egv
vmap <C-Down> ]egv
vmap <C-k> [egv
vmap <C-j> ]egv

" syntastic overrides
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_loc_list_height = 5
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 1
let g:syntastic_javascript_checkers = ['eslint']

let g:syntastic_error_symbol = '‚ùå'
let g:syntastic_style_error_symbol = '‚ÅâÔ∏è'
let g:syntastic_warning_symbol = '‚ö†Ô∏è'
let g:syntastic_style_warning_symbol = 'üí©'

highlight link SyntasticErrorSign SignColumn
highlight link SyntasticWarningSign SignColumn
highlight link SyntasticStyleErrorSign SignColumn
highlight link SyntasticStyleWarningSign SignColumn

" Trying Neomake
autocmd! BufWritePost,BufEnter * Neomake
let g:neomake_javascript_enabled_makers = ['eslint']

" // to search for the selection of text
vnoremap // y/<C-R>"<CR>

" Map neoterm terminal exit to ESC
tnoremap <Esc> <C-\><C-n>
